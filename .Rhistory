newpalette<-colorRampPalette(brewer.pal(9,"Blues"))(20)
newpalette
copySml.length
len(copySml)
copySml.size
copySml.size()
copySml.length()
copySml
length(copySml)
if (length(gset) > 1) idx <- grep("GPL2895", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]newpalette<-colorRampPalette(brewer.pal(9,"Blues"))(10)
# group names for all samples in a series
gsms <- "abcdefgABhijklCDE"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
copySml = sml
sml <- paste("G", sml, sep="")  #set group names
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("nash","control")
# set parameters and draw the plot
upperColor = colorRampPalette(brewer.pal(9,"YlOrRd"))(length(copySml))
lowColor = colorRampPalette(brewer.pal(9,"YlOrRd"))(length(copySml))
colors = c()
upper = 0
low = 0
for (i in copySml) {
if (grepl('[A-Z]', i)) {
colors = c(colors, brewer.pal(9, "YlOrRd")[upper + 3])
upper = upper + 1
} else {
colors = c(colors, brewer.pal(9, "BuGn")[low + 3])
low = low + 1
}
}
palette(colors)
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE24807", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=c(brewer.pal(upper, "YIOrRd")[3], brewer.pal(upper, "BuGn")[3]), bty="n")
if (length(gset) > 1) idx <- grep("GPL2895", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]newpalette<-colorRampPalette(brewer.pal(9,"Blues"))(10)
# group names for all samples in a series
gsms <- "abcdefgABhijklCDE"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
copySml = sml
sml <- paste("G", sml, sep="")  #set group names
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("nash","control")
# set parameters and draw the plot
upperColor = colorRampPalette(brewer.pal(9,"YlOrRd"))(length(copySml))
lowColor = colorRampPalette(brewer.pal(9,"BuGn"))(length(copySml))
colors = c()
upper = 0
low = 0
for (i in copySml) {
if (grepl('[A-Z]', i)) {
colors = c(colors, upperColor[upper + 3])
upper = upper + 1
} else {
colors = c(colors, lowColor[low + 3])
low = low + 1
}
}
palette(colors)
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE24807", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=c(brewer.pal(upper, "YIOrRd")[3], brewer.pal(upper, "BuGn")[3]), bty="n")
sml
gsms
ex
sml
copySml
order(copySml)
if (length(gset) > 1) idx <- grep("GPL2895", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]newpalette<-colorRampPalette(brewer.pal(9,"Blues"))(10)
# group names for all samples in a series
gsms <- "abcdefgABhijklCDE"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
copySml = sml
sml <- paste("G", sml, sep="")  #set group names
gset <- getGEO("GSE24807", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL2895", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]newpalette<-colorRampPalette(brewer.pal(9,"Blues"))(10)
gset <- gset[[idx]]
gsms <- "abcdefgABhijklCDE"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
copySml = sml
copySml
sml <- paste("G", sml, sep="")  #set group names
sml
ex <- exprs(gset)[ , order(sml)]
sml
sml <- sml[order(sml)]
sml
if (length(gset) > 1) idx <- grep("GPL2895", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
gsms <- "abcdefgABhijklCDE"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
copySml = sml
sml <- paste("G", sml, sep="")  #set group names
# order samples by group
ex <- exprs(gset)[ , order(sml)]
fl <- as.factor(sml)
labels <- c("nash","control")
# set parameters and draw the plot
upperColor = colorRampPalette(brewer.pal(9,"YlOrRd"))(length(copySml))
lowColor = colorRampPalette(brewer.pal(9,"BuGn"))(length(copySml))
colors = c()
upper = 0
low = 0
for (i in copySml) {
if (grepl('[A-Z]', i)) {
colors = c(colors, upperColor[upper + 3])
upper = upper + 1
} else {
colors = c(colors, lowColor[low + 3])
low = low + 1
}
}
palette(colors)
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE24807", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=c(brewer.pal(upper, "YIOrRd")[3], brewer.pal(upper, "BuGn")[3]), bty="n")
gset <- getGEO("GSE24807", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL2895", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
gsms <- "abcdefgABhijklCDE"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
copySml = sml
sml <- paste("G", sml, sep="")  #set group names
ex <- exprs(gset)[ , order(sml)]
fl <- as.factor(sml)
labels <- c("nash","control")
upperColor = colorRampPalette(brewer.pal(9,"YlOrRd"))(length(copySml))
lowColor = colorRampPalette(brewer.pal(9,"BuGn"))(length(copySml))
colors = c()
upper = 0
low = 0
for (i in copySml) {
if (grepl('[A-Z]', i)) {
colors = c(colors, upperColor[upper + 3])
upper = upper + 1
} else {
colors = c(colors, lowColor[low + 3])
low = low + 1
}
}
colors
sml
if (length(gset) > 1) idx <- grep("GPL2895", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
gsms <- "abcdefgABhijklCDE"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
copySml = sml
copySml = copySml[order(copySml)]
sml <- paste("G", sml, sep="")  #set group names
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("nash","control")
# set parameters and draw the plot
upperColor = colorRampPalette(brewer.pal(9,"YlOrRd"))(length(copySml))
lowColor = colorRampPalette(brewer.pal(9,"BuGn"))(length(copySml))
colors = c()
upper = 0
low = 0
for (i in copySml) {
if (grepl('[A-Z]', i)) {
colors = c(colors, upperColor[upper + 3])
upper = upper + 1
} else {
colors = c(colors, lowColor[low + 3])
low = low + 1
}
}
palette(colors)
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE24807", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=c(brewer.pal(upper, "YIOrRd")[3], brewer.pal(upper, "BuGn")[3]), bty="n")
gset <- getGEO("GSE24807", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL2895", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
gsms <- "abcdefgABhijklCDE"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")  #set group names
# order samples by group
ex <- exprs(gset)[ , order(sml)]
#sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("nash","control")
# set parameters and draw the plot
upperColor = colorRampPalette(brewer.pal(9,"YlOrRd"))(length(copySml))
lowColor = colorRampPalette(brewer.pal(9,"BuGn"))(length(copySml))
colors = c()
upper = 0
low = 0
for (i in copySml) {
if (grepl('[A-Z]', i)) {
colors = c(colors, upperColor[upper + 3])
upper = upper + 1
} else {
colors = c(colors, lowColor[low + 3])
low = low + 1
}
}
palette(colors)
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE24807", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=c(brewer.pal(upper, "YIOrRd")[3], brewer.pal(upper, "BuGn")[3]), bty="n")
legend("topleft", labels, fill=c(brewer.pal(upper, "YIOrRd")[3], brewer.pal(upper, "BuGn")[3]), bty="n")
legend("topleft", labels, fill=c(upperColor[3], lowColor[3]), bty="n")
legend("topleft", labels, fill=c(lowColor[3], upperColor[3]), bty="n")
R help()
ls
exit
exit()
q)_
q()
demo()
demo(graphics)
help.start()
install.packages("vcd")
help(package="vcd")
library(vcd)
version
update()
library(vcd)
library(vcd)
help(Arthritis)
Arthritis
example("Arthritis")
a <- c(1,2,3,4,5)
a
a <- c(1,2,5,3,6,-2,4)
a[2:6]
a(2:6)
a <- c(2:6)
a
a <- c(0:6)
a
dimen1 <- c("A1","A2")
dimen2 <- c("B1", "B2")
dimen3 <- c("C1","C2","C3","C4")
z <- array(1:24, dimnames = list(dimen1, dimen2, dimen3))
z <- array(1:24,dimensions= c(2,3,4), dimnames = list(dimen1, dimen2, dimen3))
z <- array(1:24,c(2,3,4), dimnames = list(dimen1, dimen2, dimen3))
z <- array(1:24, c(2,3,4), dimnames=list(dimen1, dimen2, dimen3))
dimen2 <- c("B1", "B2", "B3")
z <- array(1:24, c(2,3,4), dimnames=list(dimen1, dimen2, dimen3))
z
z[1]
z[::``]
z[::1]
z[,,1]
patientID <- c(1,2,3,4)
age <- c(25,34,28,52)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
static <- c("Poor", "Improved", "Excellent", "Poor")
patientdata <- data.frame(patientID, age, diabetes, status)
patientdata <- data.frame(patientID, age, diabetes, static)
patientdata
patientdata$age
patientdata$patientID
table(patientdata$diabetes, patientdata$static)
summary(patientdata$diabetes)
plot(patientdata$diabetes, patientdata$static)
status <- c("Poor", "Improved", "Excellent", "Poor")
status <- factor(status, ordered = TRUE)
status
clear
clear()
q(0)
q()
mydata <- data.frame(c(2,2,6,4), c(3,4,2,8))
mydata
mydata <- data.frame(x1=c(2,2,6,4), x2=c(3,4,2,8))
mydata
mydata$sumx <- mydata$x1 + mydata$x2
mydata$meanx <- (mydata$x1 + mydata$x2) / 2
attach(mydata)
mydata <- transform(mydata, sumx = x1 + x2, meanx = (x1 + x2) / 2)
mydata
manager <- c(1,2,3,4,5)
data <- c("10/24/08", "10/28/08", "10/01/08", "10/12/08", "5/1/09")
country <- c("US", "US", "UK", "UK", "UK")
gender <- c("M", "F", "F", "M", "F")
age <- c(32, 45, 25, 39, 99)
q1 <- c(5,3,3,3,2)
q2 <- c(4,5,5,3,2)
q3 <- c(5,2,2,4,1)
q4 <- c(5,5,5,NA,2)
q5 <- c(5,5,2,NA,1)
leadship <- data.frame(manager, data, country, gender, age, q1, q2,q3,q4,q5,stringsAsFactors = FALSE)
leadship
leadship$age[leadship$age == 99] <- NA
leadship
shiny::runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
altb <- c(39, 44, 34,58, 40, 29, 20,27, 28)
altl <- c(27, 44, 68, 39, 30, 37, 33, 30, 32)
altlb <- c(28, 32, 44, 35, 48, 39, 220)
altm <- c(50, 158, 121, 37, 41, 24, 28)
altn <- c(115, 32, 32, 37, 48, 50, 56)
help(array)
data.frame(altb, altl, altlb, altm, altn)
altlb <- c(28, 32, 44, 35, 48, 39, 220, NULL, NULL)
altm <- c(50, 158, 121, 37, 41, 24, 28, NULL, NULL)
altn <- c(115, 32, 32, 37, 48, 50, 56, NULL, NULL)
data.frame(altb, altl, altlb, altm, altn)
altn <- c(115, 32, 32, 37, 48, 50, 56)
altm <- c(50, 158, 121, 37, 41, 24, 28)
altlb <- c(28, 32, 44, 35, 48, 39, 220)
alt <- c(altb, altl, altlb, altm, altn)
alt
altlb <- c(28, 32, 44, 35, 48, 39, 220, 0, 0)
altm <- c(50, 158, 121, 37, 41, 24, 28, 0, 0)
altn <- c(115, 32, 32, 37, 48, 50, 56, 0, 0)
data.frame(altb, altlm, altlbm, altm, altn)
data.frame(altb, altlm, altlb, altm, altn)
data.frame(altb, altl, altlb, altm, altn)
altn <- c(115, 32, 32, 37, 48, 50, 56, NA, NA)
altn <- c(115, 32, 32, 37, 48, 50, 56, NA, NA)
altm <- c(50, 158, 121, 37, 41, 24, 28, 0, NA)
altm <- c(50, 158, 121, 37, 41, 24, 28, NA, NA)
altlb <- c(28, 32, 44, 35, 48, 39, 220, NA, NA)
data.frame(altb, altl, altlb, altm, altn)
alt <- data.frame(altb, altl, altlb, altm, altn)
alt
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
leadership <- data.frame(manager, date, gender, age, q1, q2, q3, q4, q5)
leadership <- data.frame(manager, date, gender, age, q1, q2, q3, q4, q5, stringsAsFactors = FALSE)
leadership
View(alt)
View(alt)
leadership
q4 <- c(5,5,5,NA,2)
q4 <- c(5,5,5,NA,2)
leadership <- data.frame(manager, date, country, gender, age, q1, q2, q3, q4, q5, stringsAsFactors = FALSE)
manager <- c(1, 2, 3, 4, 5)
manager <- c(1, 2, 3, 4, 5)
date <- c("10/24/08", "10/28/08", "10/1/08", "10/12/08", "5/1/09")
country <- c("US", "US", "UK", "UK", "UK")
gender <- c("M","F","F","M","F")
age <- c(32,45,25,39,99)
q1 <- c(5,3,3,3,2)
q2 <- c(4,5,5,3,2)
q3 <- c(5,2,5,4,1)
q4 <- c(5,5,5,NA,2)
q5 <- c(5,5,2,NA,1)
leadership <- data.frame(manager, date, country, gender, age, q1, q2, q3, q4, q5, stringsAsFactors = FALSE)
leadership
leadership <- within(leadership, {})
leadership <- within(leadership, {
agecat <- NA
agecat[age > 75] <- "Elder"
agecat[age >= 55 & age < 75] <- "Middle"
agecat[age < 55] <- "Young"
})
leadership
fix(leadership)
install.packages("reshape")
Sys.Date()
date()
as.character(dates)
startdate <- as.Date("2004-02-13")
enddate <- as.Date("2011-01-22")
enddate - startdate
dates <- enddate - startdate
as.character(dates)
nedata <- leadership[order(leadership),]
nedata
View(nedata)
install.packages("sqldf")
shiny::runApp('Documents/R/doctor')
install.packages("RODBC")
library(RODBC)
channel <- odbcConnectExcel("门诊病人数据收集0703.xlsx")
help("RODBC")
help("odbcConnect")
install.packages("xlsx")
library(xlsx)
library(rJava)
library(xlsx)
library(xlsx)
install.packages("tidyverse")
install.packages("readxl")
library(readxl)
readxl_example()
read_excel("clippy.xls")
readxl_example("clippy.xls")
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
help(fileInput)
runApp('Documents/R/doctor')
options(digits = 2)
Student <- c("John Davis", "Angela William", "Bullwinkle Moose", "David Jones", "Janice Markhammer", "Cheryl Cushing", "Reuven Ytzrhak", "Gerg Knox", "Joel England", "Mary Rayburn")
Math -> c(502, 600, 412, 358, 495, 512, 410, 625, 573, 522)
Math <- c(502, 600, 412, 358, 495, 512, 410, 625, 573, 522)
Science <- c(95, 99, 80, 82, 75, 85, 80, 95, 89, 86)
English <- c(25, 22, 18, 15, 20, 28, 15, 30, 27, 18)
roster <- data.frame(Student, Math, Science, English, stringsAsFactors = FALSE)
View(roster)
View(roster)
z <- scale(roster[, 2:4])
z
score <- apply(z, 1, mean)
score
roster <- cbind(roster, score)
roster
y <- quantile(score, c(.8, .6, .4, .2))
y
raster$grande[score >= y1] <- "A"
roster$grande[score >= y1] <- "A"
roster$grande[score >= y[1]] <- "A"
roster$grande[score < y[1] & score >= y[2]] <- "B"
roster$grande[score < y[2] & score >= y[3]] <- "C"
roster$grande[score < y[3]& score >= y[4]] <- "D"
roster$grande[score < y[4]] <- "F"
name <- strsplit((roster$Student), " ")
lastname <- sapply(name, "[", 2)
firstname <- sapply(name, "[", 1)
roster <- cbind(firstname, lastname, roster[, -1])
roster <- roster[order(lastname, firstname),]
roster
cars <- mtcars[1:5, 1:4]
cars
t(cars)
runApp('Documents/R/doctor')
install.packages("reshape")
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
help("apply")
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
dimnames(x)[[1]] <- letters[1:8]
apply(x, 2, mean, trim = .2)
col.sums <- apply(x, 2, sum)
row.sums <- apply(x, 1, sum)
rbind(cbind(x, Rtot = row.sums), Ctot = c(col.sums, sum(col.sums)))
stopifnot( apply(x, 2, is.vector))
cave <- function(x, c1, c2) c(mean(x[c1]), mean(x[c2]))
apply(x, 1, cave,  c1 = "x1", c2 = c("x1","x2"))
ma <- matrix(c(1:4, 1, 6:8), nrow = 2)
ma
apply(ma, 1, table)  #--> a list of length 2
apply(ma, 1, stats::quantile) # 5 x n matrix with rownames
stopifnot(dim(ma) == dim(apply(ma, 1:2, sum)))
z <- array(1:24, dim = 2:4)
zseq <- apply(z, 1:2, function(x) seq_len(max(x)))
zseq         ## a 2 x 3 matrix
typeof(zseq) ## list
dim(zseq) ## 2 3
zseq[1,]
apply(z, 3, function(x) seq_len(max(x)))
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
runApp('Documents/R/doctor')
help("data.frame")
runApp('Documents/R/doctor')
install.packages(c("VIM","mice"))
help(summarySE)
help("summarySE")
help('summarySE')
help(summarySE)
shiny::runApp('Documents/R/doctor')
